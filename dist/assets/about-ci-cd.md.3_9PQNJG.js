import{_ as t,c as e,o,a4 as i}from"./chunks/framework.DAF-xrV5.js";const b=JSON.parse('{"title":"Continuous Integration/Continuous Deployment (CI/CD)","description":"","frontmatter":{},"headers":[],"relativePath":"about-ci-cd.md","filePath":"about-ci-cd.md"}'),s={name:"about-ci-cd.md"},n=i('<h1 id="continuous-integration-continuous-deployment-ci-cd" tabindex="-1">Continuous Integration/Continuous Deployment (CI/CD) <a class="header-anchor" href="#continuous-integration-continuous-deployment-ci-cd" aria-label="Permalink to &quot;Continuous Integration/Continuous Deployment (CI/CD)&quot;">​</a></h1><p>Vanguard uses a robust CI/CD pipeline to ensure code quality. This section covers our CI/CD practices and how to interact with them.</p><h3 id="ci-cd-pipeline-overview" tabindex="-1">CI/CD Pipeline Overview <a class="header-anchor" href="#ci-cd-pipeline-overview" aria-label="Permalink to &quot;CI/CD Pipeline Overview&quot;">​</a></h3><p>Our CI/CD pipeline is designed to automatically test, build, and deploy Vanguard with each push to the main branch or pull request. Here&#39;s an overview of the process:</p><ol><li><strong>Code Push</strong>: Developer pushes code to GitHub.</li><li><strong>Code Quality Checks</strong>: Static analysis and style checks are performed.</li><li><strong>Automated Tests</strong>: GitHub Actions runs our test suite.</li></ol><h3 id="github-actions" tabindex="-1">GitHub Actions <a class="header-anchor" href="#github-actions" aria-label="Permalink to &quot;GitHub Actions&quot;">​</a></h3><p>We use GitHub Actions for our CI/CD processes. The configuration can be found in <code>.github/workflows/</code> in the repository.</p><h4 id="main-workflow" tabindex="-1">Main Workflow <a class="header-anchor" href="#main-workflow" aria-label="Permalink to &quot;Main Workflow&quot;">​</a></h4><p>Our main workflow (<code>main.yml</code>) includes the following jobs:</p><ol><li><strong>Pest Tests</strong>: Runs our Pest test suite.</li><li><strong>Dusk Test</strong>: Runs our Dusk test suite.</li><li><strong>Duster</strong>: Checks code style using PHP_CodeSniffer.</li><li><strong>Static Analysis</strong>: Runs PHPStan for static code analysis.</li><li><strong>Rector</strong>: Automates PHP code upgrades and refactoring tasks.</li></ol><h3 id="interacting-with-ci-cd" tabindex="-1">Interacting with CI/CD <a class="header-anchor" href="#interacting-with-ci-cd" aria-label="Permalink to &quot;Interacting with CI/CD&quot;">​</a></h3><p>As a developer, you&#39;ll primarily interact with the CI/CD system when you push code or create pull requests. Here are some key points to remember:</p><ol><li><p><strong>Viewing Build Status</strong>: You can see the status of your builds directly on GitHub in the &quot;Actions&quot; tab.</p></li><li><p><strong>Handling Failures</strong>: If a build fails, click on the failed job in GitHub Actions to see detailed logs and error messages.</p></li><li><p><strong>Running Actions Locally</strong>: You can use <a href="https://github.com/nektos/act" target="_blank" rel="noreferrer">act</a> to run GitHub Actions locally for testing:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">act</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div></li></ol><h3 id="troubleshooting-common-ci-cd-issues" tabindex="-1">Troubleshooting Common CI/CD Issues <a class="header-anchor" href="#troubleshooting-common-ci-cd-issues" aria-label="Permalink to &quot;Troubleshooting Common CI/CD Issues&quot;">​</a></h3><ol><li><p><strong>Flaky Tests</strong>: If you encounter intermittently failing tests, try to reproduce locally and fix the root cause rather than simply re-running the pipeline.</p></li><li><p><strong>Environment Variables</strong>: Ensure all necessary environment variables are correctly set in GitHub Secrets.</p></li></ol>',15),a=[n];function r(l,c,u,d,h,p){return o(),e("div",null,a)}const m=t(s,[["render",r]]);export{b as __pageData,m as default};
